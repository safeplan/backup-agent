# coding: utf-8

"""
    device-api

    safeplan device api  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StatusInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server_time': 'datetime',
        'status': 'str',
        'as_of': 'datetime',
        'ip_address': 'str',
        'repository_path': 'str'
    }

    attribute_map = {
        'server_time': 'server_time',
        'status': 'status',
        'as_of': 'as_of',
        'ip_address': 'ip_address',
        'repository_path': 'repository_path'
    }

    def __init__(self, server_time=None, status=None, as_of=None, ip_address=None, repository_path=None):  # noqa: E501
        """StatusInformation - a model defined in Swagger"""  # noqa: E501

        self._server_time = None
        self._status = None
        self._as_of = None
        self._ip_address = None
        self._repository_path = None
        self.discriminator = None

        if server_time is not None:
            self.server_time = server_time
        if status is not None:
            self.status = status
        if as_of is not None:
            self.as_of = as_of
        if ip_address is not None:
            self.ip_address = ip_address
        if repository_path is not None:
            self.repository_path = repository_path

    @property
    def server_time(self):
        """Gets the server_time of this StatusInformation.  # noqa: E501


        :return: The server_time of this StatusInformation.  # noqa: E501
        :rtype: datetime
        """
        return self._server_time

    @server_time.setter
    def server_time(self, server_time):
        """Sets the server_time of this StatusInformation.


        :param server_time: The server_time of this StatusInformation.  # noqa: E501
        :type: datetime
        """

        self._server_time = server_time

    @property
    def status(self):
        """Gets the status of this StatusInformation.  # noqa: E501


        :return: The status of this StatusInformation.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StatusInformation.


        :param status: The status of this StatusInformation.  # noqa: E501
        :type: str
        """
        allowed_values = ["provisioned", "initialized", "in_operation"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def as_of(self):
        """Gets the as_of of this StatusInformation.  # noqa: E501


        :return: The as_of of this StatusInformation.  # noqa: E501
        :rtype: datetime
        """
        return self._as_of

    @as_of.setter
    def as_of(self, as_of):
        """Sets the as_of of this StatusInformation.


        :param as_of: The as_of of this StatusInformation.  # noqa: E501
        :type: datetime
        """

        self._as_of = as_of

    @property
    def ip_address(self):
        """Gets the ip_address of this StatusInformation.  # noqa: E501


        :return: The ip_address of this StatusInformation.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this StatusInformation.


        :param ip_address: The ip_address of this StatusInformation.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def repository_path(self):
        """Gets the repository_path of this StatusInformation.  # noqa: E501


        :return: The repository_path of this StatusInformation.  # noqa: E501
        :rtype: str
        """
        return self._repository_path

    @repository_path.setter
    def repository_path(self, repository_path):
        """Sets the repository_path of this StatusInformation.


        :param repository_path: The repository_path of this StatusInformation.  # noqa: E501
        :type: str
        """

        self._repository_path = repository_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
